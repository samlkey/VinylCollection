@page "/add-album"
@using FRONTEND.Data
@using FRONTEND.Services
@inject IVinylService VinylService
@inject NavigationManager Navigation

@rendermode InteractiveServer

<PageTitle>Add Album</PageTitle>

<div class="add-album-container">
    <h2>Add New Album</h2>
    
    @if (!string.IsNullOrEmpty(message))
    {
        <div class="alert @(message.Contains("Error") ? "alert-danger" : "alert-success")">
            @message
        </div>
    }
    
    <EditForm Model="@newAlbum" OnValidSubmit="AddAlbumToDatabase" FormName="addAlbumForm">
        <DataAnnotationsValidator />
        <ValidationSummary />
        
        <div class="form-group">
            <label for="name">Album Name:</label>
            <InputText id="name" @bind-Value="newAlbum.Name" class="form-control" />
            <ValidationMessage For="@(() => newAlbum.Name)" />
        </div>
        
        <div class="form-group">
            <label for="artist">Artist:</label>
            <InputText id="artist" @bind-Value="newAlbum.Artist" class="form-control" />
            <ValidationMessage For="@(() => newAlbum.Artist)" />
        </div>
        
        <div class="form-group">
            <label for="release">Release Year:</label>
            <InputNumber id="release" @bind-Value="newAlbum.Release" class="form-control" TValue="int" />
            <ValidationMessage For="@(() => newAlbum.Release)" />
        </div>
        
        <div class="form-group">
            <label for="rating">Rating (0-5):</label>
            <InputNumber id="rating" @bind-Value="newAlbum.Rating" class="form-control" min="0" max="5" step="0.1" TValue="float" />
            <ValidationMessage For="@(() => newAlbum.Rating)" />
        </div>
        
        <div class="form-group">
            <label for="length">Length (minutes):</label>
            <InputNumber id="length" @bind-Value="newAlbum.Length" class="form-control" min="0" step="0.1" TValue="float" />
            <ValidationMessage For="@(() => newAlbum.Length)" />
        </div>
        
        <div class="form-group">
            <label for="primaryColour">Primary Colour (hex):</label>
            <InputText id="primaryColour" @bind-Value="newAlbum.PrimaryColour" class="form-control" />
            <ValidationMessage For="@(() => newAlbum.PrimaryColour)" />
        </div>
        
        <div class="form-group">
            <label for="imgSrc">Front Image Path:</label>
            <InputText id="imgSrc" @bind-Value="newAlbum.ImgSrc" class="form-control" />
            <ValidationMessage For="@(() => newAlbum.ImgSrc)" />
        </div>
        
        <div class="form-group">
            <label for="imgSrcBack">Back Image Path:</label>
            <InputText id="imgSrcBack" @bind-Value="newAlbum.ImgSrcBack" class="form-control" />
            <ValidationMessage For="@(() => newAlbum.ImgSrcBack)" />
        </div>
        
        <div class="form-actions">
            <button type="submit" class="btn btn-primary">Add Album</button>
            <button type="button" class="btn btn-secondary" @onclick="GoHome">Cancel</button>
        </div>
    </EditForm>
</div>

@code {
    private Album newAlbum = new Album();
    private string? message;

    private async Task AddAlbumToDatabase()
    {
        try
        {
            // Remove manual validation, rely on data annotations
            newAlbum.TrackList = newAlbum.TrackList ?? new List<Track>();
            await VinylService.AddAlbumAsync(newAlbum);
            message = "Album added successfully!";
            await Task.Delay(1000); // Show success message briefly
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            message = $"Error adding album: {ex.Message}";
        }
    }

    private void GoHome()
    {
        Navigation.NavigateTo("/");
    }
}

<style>
    .add-album-container {
        max-width: 600px;
        margin: 2rem auto;
        padding: 2rem;
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .alert {
        padding: 1rem;
        margin-bottom: 1rem;
        border-radius: 4px;
        border: 1px solid transparent;
    }

    .alert-success {
        color: #155724;
        background-color: #d4edda;
        border-color: #c3e6cb;
    }

    .alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: bold;
        color: #333;
    }

    .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 1rem;
    }

    .form-control:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
    }

    .validation-message {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 0.25rem;
    }

    .form-actions {
        margin-top: 2rem;
        display: flex;
        gap: 1rem;
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 4px;
        font-size: 1rem;
        cursor: pointer;
        transition: background-color 0.2s;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-primary:hover {
        background-color: #0056b3;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

    .btn-secondary:hover {
        background-color: #545b62;
    }

    .btn-info {
        background-color: #6c757d;
        color: white;
    }

    .btn-info:hover {
        background-color: #5a6268;
    }

    h2 {
        margin-bottom: 2rem;
        color: #333;
        text-align: center;
    }
</style> 