@page "/"
@using FRONTEND.Data
@using FRONTEND.Services
@inject IVinylService VinylService
@inject IColorAnalysisService ColorService

@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

@if (albums != null && albums.Count > 0 && currentAlbumIndex >= 0 && currentAlbumIndex < albums.Count)
{
    <div class="container" style="--album-bg:@(albums[currentAlbumIndex].PrimaryColour ?? "#000000");">
        <div class="@(hasAnimated ? "album-slide-in-right" : "") album-carousel" @key="currentAlbumIndex">
            <div class="vinyl-box-flip-container"
                 @onmousemove="OnImageMouseMove"
                 @onmouseleave="OnImageMouseLeave"
                 @onclick="ToggleFlip">
                <div class="vinyl-box-flip @(isFlipped ? "flipped" : "")" style="transform:@(imageTransform + (isFlipped ? " rotateY(180deg)" : ""))">
                    <img src="@albums[currentAlbumIndex].ImgSrc"
                         alt="@albums[currentAlbumIndex].Name"
                         class="vinyl-box-img front"
                         draggable="false" />
                    <img src="@albums[currentAlbumIndex].ImgSrcBack"
                         alt="@($"{albums[currentAlbumIndex]?.Name} back")"
                         class="vinyl-box-img back"
                         draggable="false" />
                </div>
            </div>

            <div class="info-container">
                <h1>@albums[currentAlbumIndex].Name</h1>
                <h2>@albums[currentAlbumIndex].Artist</h2>

                <div class="meta-info">
                    <p>@albums[currentAlbumIndex].Release</p>
                    <p>@albums[currentAlbumIndex].TrackList!.Count Songs</p>
                    <p>@albums[currentAlbumIndex].Length</p>
                </div>
                <p class="star-rating">@albums[currentAlbumIndex].GetStars(albums[currentAlbumIndex].Rating)</p>

                <div class="spotify-link-container">
                    <button class="spotify-link">Listen on Spotify</button>
                </div>
            </div>
        </div>
        <div class="album-indicator">
            @for (int i = 0; i < albums.Count; i++)
            {
                var dotIndex = i;
                <span class="dot @(dotIndex == currentAlbumIndex ? "active" : "")" @onclick="() => SetAlbumIndex(dotIndex)"></span>
            }
        </div>
    </div>
}
else
{
    <p>Loading albums...</p>
}

@code {
    private int currentAlbumIndex = 0; 
    private System.Timers.Timer? timer; 
    private List<Album>? albums; 
    private bool hasAnimated = false;
    private bool isPaused = false;
    private string imageTransform = "perspective(800px) rotateY(0deg) rotateX(0deg) scale(1)";
    private bool isFlipped = false;
    private bool canFlip = true;

    protected override async Task OnInitializedAsync() {
        albums = await VinylService.GetAllAlbumsAsync();

        // Calculate colors for albums that don't have them
        foreach (var album in albums)
        {
            if (string.IsNullOrEmpty(album.PrimaryColour))
            {
                await album.CalculatePrimaryColourAsync(ColorService);
            }
        }

        timer = new();
        timer.Interval = 10000;
        timer.Elapsed += async (sender, e) =>
        {
            await InvokeAsync(() =>
            {
                if (!isPaused)
                {
                    currentAlbumIndex = (currentAlbumIndex + 1) % albums.Count;
                    hasAnimated = true;
                    isFlipped = false;
                    StateHasChanged();
                }
            });
        };
        timer.Enabled = true;
    }

    private void SetAlbumIndex(int i)
    {
        if (albums == null || albums.Count == 0)
            return;

        if (i < 0) i = 0;
        if (i >= albums.Count) i = albums.Count - 1;

        if (i != currentAlbumIndex)
        {
            currentAlbumIndex = i;
            hasAnimated = true;
            isFlipped = false;
            PauseTimerForSeconds(10);
        }
    }

    private async void PauseTimerForSeconds(int seconds)
    {
        if (timer != null)
        {
            timer.Enabled = false;
            isPaused = true;
            await Task.Delay(seconds * 1000);
            timer.Enabled = true;
            isPaused = false;
        }
    }

    private void OnImageMouseMove(MouseEventArgs e)
    {
        double x = e.OffsetX;
        double y = e.OffsetY;
        double width = 450;  // match your CSS
        double height = 450;

        double maxTilt = 10; // reduced from 25 to 10 degrees
        double rotateY = ((x / width) - 0.5) * 2 * maxTilt; // left/right
        double rotateX = -((y / height) - 0.5) * 2 * maxTilt; // up/down

        imageTransform = $"perspective(800px) rotateY({rotateY}deg) rotateX({rotateX}deg) scale(1.05)";
    }

    private void OnImageMouseLeave()
    {
        imageTransform = "perspective(800px) rotateY(0deg) rotateX(0deg) scale(1)";
    }

    private async void ToggleFlip()
    {
        if (!canFlip) return;
        isFlipped = !isFlipped;
        canFlip = false;
        StateHasChanged();
        await Task.Delay(700); // 700ms cooldown, adjust as needed
        canFlip = true;
    }
}