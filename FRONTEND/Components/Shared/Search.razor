@using FRONTEND.Services
@using FRONTEND.Data
@rendermode InteractiveServer
@inject IVinylService VinylService
@inject NavigationManager Navigation

<div class="search-anim-row">
    <a href="/ranking">
        <button class="nav-btn search-btn color: var(--layout-text-color, white);" title="Rankings">
            Rankings
        </button>
    </a>

    <button class="nav-btn search-btn" @onclick="ToggleSearchBar" title="Search">
        <svg xmlns="http://www.w3.org/2000/svg" width="25" height="25" fill="currentColor" viewBox="0 0 16 16" style="vertical-align: middle; color: var(--layout-text-color, white);">
            <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85zm-5.242 1.106a5 5 0 1 1 0-10 5 5 0 0 1 0 10z"/>
        </svg>
    </button>
    <div class="search-bar-container @(isClosing ? "shrinking" : showSearchBar ? "expanded" : "")">
        @if (showSearchBar || isClosing)
        {
            <input class="search-bar" 
                type="text" 
                placeholder="Search albums..." 
                @bind="searchText" 
                @oninput="OnInput"
                autofocus />
            
            @if (!string.IsNullOrEmpty(searchText))
            {
                <button class="clear-search-btn" @onclick="ClearSearch" type="button" title="Clear search">
                    <span>
                        <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg" style="display:block;">
                            <line x1="5" y1="5" x2="15" y2="15" stroke="white" stroke-width="2" stroke-linecap="round"/>
                            <line x1="15" y1="5" x2="5" y2="15" stroke="white" stroke-width="2" stroke-linecap="round"/>
                        </svg>
                    </span>
                </button>
            }
            
            @if (showSuggestions || isClosingSuggestions)
            {
                <ul class="autocomplete-list @(isClosingSuggestions ? "closing" : "")">
                    @foreach (var album in suggestions)
                    {
                        <li @onclick="() => SelectSuggestion(album)">
                            <img src="@album.ImgSrc">
                            <p>@album.Name - @album.Artist</p>
                        </li>
                    }
                </ul>
            }
        }
    </div>
</div>

@code {
    private bool showSearchBar = false;
    private bool isClosing = false;
    private string searchText = string.Empty;
    private List<Album> suggestions = new List<Album>(); 
    private bool showSuggestions = false; 
    private bool isClosingSuggestions = false;

    private async Task OnInput(ChangeEventArgs e){
        searchText = e.Value?.ToString() ?? "";
        if (!string.IsNullOrWhiteSpace(searchText))
        {
            suggestions = await VinylService.SearchAlbumsAsync(searchText);

            Console.WriteLine(suggestions.Count);
            if (suggestions.Count == 0) await CloseSuggestionsAsync();
            else showSuggestions = suggestions.Any();
        }
        else
        {
            suggestions.Clear();
            await CloseSuggestionsAsync();
        }
    }

    private void SelectSuggestion(Album album)
    {
        searchText = album.Name ?? "";
        _ = CloseSuggestionsAsync();
        // Optionally: trigger navigation or callback here
    }

    private async Task ToggleSearchBar()
    {
        if (showSearchBar)
        {
            suggestions.Clear();
            showSuggestions = false;
            isClosing = true;
            await Task.Delay(350);
            showSearchBar = false;
            isClosing = false;
            searchText = string.Empty;
        }
        else
        {
            showSearchBar = true;
        }
    }

    private async Task CloseSuggestionsAsync()
    {
        isClosingSuggestions = true;
        StateHasChanged();
        await Task.Delay(250); // Match the animation duration
        showSuggestions = false;
        isClosingSuggestions = false;
        StateHasChanged();
    }

    private async Task ClearSearch()
    {
        searchText = string.Empty;
        suggestions.Clear();
        await CloseSuggestionsAsync();
    }
}
